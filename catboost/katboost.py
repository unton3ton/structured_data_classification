# conda create --name CAT

# conda activate CAT

# pip install catboost --user
# pip install seaborn scikit-learn

# pip freeze > katrequireements.txt

# conda deactivate

'''
üìå –ö—Ç–æ —Ç–∞–∫–æ–π catBoost? üêà CatBoost –æ–∑–Ω–∞—á–∞–µ—Ç ¬´–∫–∞—Ç–µ–≥–æ—Ä–∏—á–µ—Å–∫–æ–µ¬ª –ø–æ–≤—ã—à–µ–Ω–∏–µ.

CatBoost ‚Äî —ç—Ç–æ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω–æ–≥–æ –±—É—Å—Ç–∏–Ω–≥–∞, —Å–æ–∑–¥–∞–Ω–Ω–∞—è üåê–Ω–¥–µ–∫—Å–æ–º.
–ü—Ä–æ–≥–Ω–æ–∑—ã –¥–µ–ª–∞—é—Ç—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω—Å–∞–º–±–ª—è —Å–ª–∞–±—ã—Ö –æ–±—É—á–∞—é—â–∏—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤, –∞ –∏–º–µ–Ω–Ω–æ –Ω–µ–±—Ä–µ–∂–Ω—ã—Ö –¥–µ—Ä–µ–≤—å–µ–≤.
–í–æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–∏: 

‚ûñ –ø–æ–∑–≤–æ–ª—è–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –±–µ–∑ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏  
‚ûñ –¥–∞–µ—Ç –æ—Ç–ª–∏—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
‚ûñ –ø–æ–¥ –∫–∞–ø–æ—Ç–æ–º —É–º–µ–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
‚ûñ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏ –¥–ª—è —Ä–µ–≥—Ä–µ—Å—Å–∏–∏, –∏ –¥–ª—è –∫–ª–∞—Å—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
'''

'''
–û–Ω–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–µ–±—Ä–µ–∂–Ω—ã–µ (oblivious) –¥–µ—Ä–µ–≤—å—è —Ä–µ—à–µ–Ω–∏–π, —á—Ç–æ–±—ã –≤—ã—Ä–∞—Å—Ç–∏—Ç—å —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –¥–µ—Ä–µ–≤–æ.
–û–¥–Ω–∏ –∏ —Ç–µ –∂–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ª–µ–≤—ã—Ö –∏ –ø—Ä–∞–≤—ã—Ö —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–π (split) –Ω–∞ –∫–∞–∂–¥–æ–º —É—Ä–æ–≤–Ω–µ –¥–µ—Ä–µ–≤–∞.

–í –ø–ª–∞–Ω–µ –ø—Ä–æ—Å—Ç–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏ –ª–µ–≥–∫–æ—Å—Ç–∏ –≤—Ö–æ–¥–∞ –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤, –ø–æ–∂–∞–ª—É–π —è–≤–ª—è–µ—Ç—Å—è —Ç–æ–ø-1 –±–∏–±–ª–∏–æ—Ç–µ–∫–æ–π –¥–ª—è —Ç–∞–±–ª–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–∏ –≤–æ—Ç –ø–æ—á–µ–º—É:

‚è©–ü—Ä–∏–Ω–∏–º–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–µ —Ñ–∏—á–∏ —Å—Ä–∞–∑—É –±–µ–∑ –≤—Å—è–∫–æ–π –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏.

‚è©–ß—Ç–æ–±—ã –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –æ–±—É—á–µ–Ω–∏–µ —Å CPU –Ω–∞ GPU –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ–º–µ–Ω—è—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ 1 –ø–∞—Ä–∞–º–µ—Ç—Ä–∞, –±–µ–∑ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–æ–ø.–ø–∞–∫–µ—Ç–æ–≤ –∏–ª–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –≤–µ—Ä—Å–∏–π, –∫–∞–∫ –≤ –¥—Ä—É–≥–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫–∞—Ö

‚è©–î–∞–∂–µ —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –≤—ã–¥–∞–µ—Ç —Ö–æ—Ä–æ—à—É—é —Ç–æ—á–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏. –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–Ω—ã–µ, –∞ –ø–æ–¥–±–∏—Ä–∞—é—Ç—Å—è —Å–∞–º–æ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–æ–π, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞–∑–º–µ—Ä–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.

‚è©–ú–æ–∂–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏, —ç–º–±–µ–¥–¥–∏–Ω–≥–∏, –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏.

‚è©–ë–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–π –∏ –æ–±–µ—Ä—Ç–æ–∫ –≤—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–∞–π–ø–ª–∞–π–Ω—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, sklearn).

‚è©–ò–¥–µ—Ç –≤ –∫–æ–º–ø–ª–µ–∫—Ç–µ —Å "–±–∞—Ç–∞—Ä–µ–π–∫–∞–º–∏": feature_selection, object_selection, cross_validation, grid_search –∏ –ø—Ä.
'''

'''
–ë—É—Å—Ç–∏–Ω–≥ ‚Äì —ç—Ç–æ –∞–Ω—Å–∞–º–±–ª–µ–≤—ã–π –º–µ—Ç–æ–¥ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è, —Ü–µ–ª—å—é –∫–æ—Ç–æ—Ä–æ–≥–æ —è–≤–ª—è–µ—Ç—Å—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–ª–∞–±—ã—Ö –º–æ–¥–µ–ª–µ–π
–ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–¥–Ω–æ–π —Å–∏–ª—å–Ω–æ–π. –°–ª–∞–±–∞—è –º–æ–¥–µ–ª—å ‚Äì —ç—Ç–æ —Ç–∞–∫–∞—è, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –Ω–µ–º–Ω–æ–≥–æ –ª—É—á—à–µ,
—á–µ–º –Ω–∞—É–≥–∞–¥, –≤ —Ç–æ –≤—Ä–µ–º—è –∫–∞–∫ —Å–∏–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å –æ–±–ª–∞–¥–∞–µ—Ç –≤—ã—Å–æ–∫–æ–π –ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç–µ–ª—å–Ω–æ–π —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å—é. –¶–µ–ª—å –±—É—Å—Ç–∏–Ω–≥–∞ ‚Äì —É–ª—É—á—à–∏—Ç—å
—Ç–æ—á–Ω–æ—Å—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π.

–ë—É—Å—Ç–∏–Ω–≥ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—É—Ç—ë–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π –≤ –∞–Ω—Å–∞–º–±–ª—å. –ö–∞–∂–¥–∞—è —Å–ª–µ–¥—É—é—â–∞—è –º–æ–¥–µ–ª—å —Å—Ç—Ä–æ–∏—Ç—Å—è —Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º,
—á—Ç–æ–±—ã –∏—Å–ø—Ä–∞–≤–ª—è—Ç—å –æ—à–∏–±–∫–∏, —Å–¥–µ–ª–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏ –º–æ–¥–µ–ª—è–º–∏. –≠—Ç–æ –¥–æ—Å—Ç–∏–≥–∞–µ—Ç—Å—è –ø—É—Ç—ë–º —Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∫–∏ –Ω–∞ –Ω–∞–∏–±–æ–ª–µ–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö,
–∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω—ã –∏–ª–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω—ã —Ä–∞–Ω–µ–µ.

–û–¥–Ω–æ–π –∏–∑ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ–∏—á –±—É—Å—Ç–∏–Ω–≥–∞ —è–≤–ª—è–µ—Ç—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –≤–∑–≤–µ—à–∏–≤–∞–Ω–∏–µ –æ–±—É—á–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö. –ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —ç—Ç–∞–ø–∞ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ –≤
–∞–Ω—Å–∞–º–±–ª–µ, –¥–∞–Ω–Ω—ã–µ, –Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö –±—ã–ª–∏ –¥–æ–ø—É—â–µ–Ω—ã –æ—à–∏–±–∫–∏, –ø–æ–ª—É—á–∞—é—Ç –±–æ–ª—å—à–∏–π –≤–µ—Å. –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –ø–æ—Å–ª–µ–¥—É—é—â–∏–µ –º–æ–¥–µ–ª–∏ —É–¥–µ–ª—è—é—Ç
–±–æ–ª—å—à–µ –≤–Ω–∏–º–∞–Ω–∏—è –∏–º–µ–Ω–Ω–æ —ç—Ç–∏–º —Ç—Ä—É–¥–Ω—ã–º —Å–ª—É—á–∞—è–º.

–ö–æ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ä–µ—à–∞—é—â–∏–µ –¥–µ—Ä–µ–≤—å—è, –∫–∞–∂–¥–æ–µ –ø–æ—Å–ª–µ–¥—É—é—â–µ–µ –¥–µ—Ä–µ–≤–æ —Å—Ç—Ä–æ–∏—Ç—Å—è —Å —É—á–µ—Ç–æ–º –æ—à–∏–±–æ–∫, —Å–¥–µ–ª–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏ –¥–µ—Ä–µ–≤—å—è–º–∏.
–ù–æ–≤—ã–µ –¥–µ—Ä–µ–≤—å—è —É—á–∞—Ç—Å—è –Ω–∞ –æ—à–∏–±–∫–∞—Ö, —É–ª—É—á—à–∞—è –æ–±—â—É—é —Ç–æ—á–Ω–æ—Å—Ç—å –∞–Ω—Å–∞–º–±–ª—è.

–ù–µ—Å–º–æ—Ç—Ä—è –Ω–∞ —Å–≤–æ—é –º–æ—â—å, –±—É—Å—Ç–∏–Ω–≥ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–∫–ª–æ–Ω–µ–Ω –∫ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—é, –æ—Å–æ–±–µ–Ω–Ω–æ –µ—Å–ª–∏ –≤ –∞–Ω—Å–∞–º–±–ª–µ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –º–æ–¥–µ–ª–µ–π –∏–ª–∏ –æ–Ω–∏
—Å–ª–∏—à–∫–æ–º —Å–ª–æ–∂–Ω—ã–µ. –î–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è –∫ –ø—Ä–∏–º–µ—Ä—É —Ä–∞–Ω–Ω—è—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ (early stopping).
'''


import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report
from catboost import CatBoostClassifier




# Load the Titanic dataset
# titanic = sns.load_dataset('titanic') # https://github.com/mwaskom/seaborn-data/blob/master/titanic.csv
# target = 'survived'

titanic = pd.read_csv('titanic.csv')
print(titanic.head())

target = 'survived'



# preprocessing data
 
# filling missing value in deck column with a new category: Unknown
categories = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'Unknown']
titanic['deck'] = pd.Categorical(
    titanic['deck'], categories=categories, ordered=True)
titanic['deck'] = titanic['deck'].fillna('Unknown')
 
# filling missing value in age column using mean imputation
age_mean = titanic['age'].fillna(0).mean()
titanic['age'] = titanic['age'].fillna(age_mean)
 
# droping missing values in embark as there are only 2
titanic = titanic.dropna()
 
# droping alive column to make the problem more challenging
titanic = titanic.drop('alive', axis=1)



# Create the feature matrix (X) and target vector (y)
X = titanic.drop(target, axis=1)
y = titanic[target]
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)



# specifying categorical features
categorical_features = ['sex', 'pclass', 'sibsp', 'parch', 'embarked',
                        'class', 'who', 'adult_male', 'embark_town', 'alone', 'deck']
# create and train the CatBoostClassifier
model = CatBoostClassifier(iterations=100, depth=8, learning_rate=0.1, cat_features=categorical_features,
                           loss_function='Logloss', custom_metric=['AUC'], random_seed=42)
# model.fit(X_train, y_train)



# model.save_model('catboost_classification_titanic.model')

model_name = CatBoostClassifier()      # parameters not required.
model_name.load_model('catboost_classification_titanic.model')



# predicting accuracy
y_pred = model_name.predict(X_test)
# print(y_pred)
X_test['predicted'] = y_pred
print(X_test.head(11))

# saving the dataframe
X_test.to_csv('titanic-predicted.csv')


accuracy = accuracy_score(y_test, y_pred)
print(f"Accuracy: {accuracy:.2f}")


# Plot the confusion matrix as a heatmap
confusion = confusion_matrix(y_test, y_pred)

plt.figure(figsize=(8, 6))
sns.heatmap(confusion, annot=True, fmt='d', cmap='Blues', xticklabels=[
            'Predicted Negative', 'Predicted Positive'], yticklabels=['Actual Negative', 'Actual Positive'])
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()



importances = model_name.get_feature_importance()
feature_names = X.columns
sorted_indices = np.argsort(importances)[::-1]
 
plt.figure(figsize=(10, 6))
plt.bar(range(len(feature_names)), importances[sorted_indices])
plt.xticks(range(len(feature_names)), feature_names[sorted_indices], rotation=90)
plt.title("Feature Importance")
plt.show()



# Print the classification report
print("Classification Report:")
print(classification_report(y_test, y_pred))


'''
Accuracy: 0.80

Classification Report:
              precision    recall  f1-score   support

           0       0.82      0.87      0.84       109
           1       0.77      0.70      0.73        69

    accuracy                           0.80       178
   macro avg       0.80      0.78      0.79       178
weighted avg       0.80      0.80      0.80       178
'''